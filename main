import imaplib
import email
from email.header import decode_header
import datetime
from email.header import Header
from email.mime.text import MIMEText
from smtplib import SMTP_SSL
from imapclient import IMAPClient


# Dict with one key for array of elements
class Dictlist(dict):
    def __setitem__(self, key, value):
        try:
            self[key]
        except KeyError:
            super(Dictlist, self).__setitem__(key, [])
        self[key].append(value)



# Variables
user = 'dan020304dan93@gmail.com'
password = 'ufggzyqlhvrnrbic'

mainstring = ""
counter = []

d = {'Letters': 0, 'Numbers': 0}

SubjectListSorted = []
BodyListSorted = []

SubjektDictlist = Dictlist()
BodyDictlist = Dictlist()

# Initiate a connection with the host (in this case, Gmail)
server = "imap.gmail.com"
imap = imaplib.IMAP4_SSL(server)

# Remake date into needed format
CurentDate = (datetime.datetime.now()).strftime("%d %b %Y")

if CurentDate[0] == '0':
    RedefinedDate = CurentDate[1] + CurentDate[2] + CurentDate[3] + CurentDate[4] + CurentDate[5] + CurentDate[6] + \
                    CurentDate[7] + CurentDate[8] + CurentDate[9] + CurentDate[10]

else:
    RedefinedDate = CurentDate

print(RedefinedDate)

# login into the gmail account
imap.login(user, password)

# Using SELECT to chose the e-mails.
res, messages = imap.select('INBOX')

# Calculating the total number of sent Emails
messages = int(messages[0])

# Number of recent e-mails to be fetched
n = 20

# Iterating over the sent emails
for i in range(messages, messages - n, -1):
    res, msg = imap.fetch(str(i), "(RFC822)")  # Using the RFC822 protocol
    for response in msg:
        if isinstance(response, tuple):
            msg = email.message_from_bytes(response[1])

            # Retrieving the senders email
            From = msg["From"]

            # Retrieving the subject of the email
            subject = msg["Subject"]

            # Retrieving the date of the email
            DateOfMassages = msg["Date"]

            # Remake date of mails into needed format (should be rewritten)
            DateOfMassages_var = DateOfMassages[5] + DateOfMassages[6] + DateOfMassages[7] + DateOfMassages[8] + \
                                 DateOfMassages[9] + DateOfMassages[10] + \
                                 DateOfMassages[11] + DateOfMassages[12] + DateOfMassages[13] + DateOfMassages[14] + \
                                 DateOfMassages[15]

            if DateOfMassages_var[0] == '0':
                DateOfMassages_var = DateOfMassages[6] + DateOfMassages[7] + DateOfMassages[8] + DateOfMassages[9] + \
                                     DateOfMassages[10] + \
                                     DateOfMassages[11] + DateOfMassages[12] + DateOfMassages[13] + DateOfMassages[14] + \
                                     DateOfMassages[15]

            # Revue current date with mails day (it's better to wound way how to immediately
            # get mail with needed date without checking)
            if DateOfMassages_var == RedefinedDate:

                # Create dict where key is sender and parameters is subjects
                counter.append(From)
                tu = From
                yo = decode_header(msg["Subject"])[0][0]  # дописать если нет сабджекта
                SubjektDictlist[tu] = yo

                # Create dict where key is sender and parameters is budy of letter
                if msg.is_multipart():
                    # iterate over email parts
                    for part in msg.walk():
                        # extract content type of email
                        content_type = part.get_content_type()
                        content_disposition = str(part.get("Content-Disposition"))
                        try:
                            # get the email body
                            body = part.get_payload(decode=True).decode()
                        except:
                            pass
                        if content_type == "text/plain" and "attachment" not in content_disposition:
                            # print text/plain emails and skip attachments
                            BodyDictlist[From] = body

# This variable creates array with keys which matching our requirement be larger than 9
pedro = list((x) for x in set(counter) if counter.count(x) >= 2)


# эти два цикла проверяют нет ли у нас в контейнере элементов не соотвецтвуюших нашему параметру быть >= 10
# Если есть, он его удаляет
x = 0
while x < len(SubjektDictlist.keys()):
    if list(SubjektDictlist.keys())[x] in pedro:
        print()
    else:
        SubjektDictlist.pop(list(SubjektDictlist.keys())[x])
        x -= 1
    x += 1

x = 0
while x < len(BodyDictlist.keys()):
    if list(BodyDictlist.keys())[x] in pedro:
        print()
    else:
        BodyDictlist.pop(list(BodyDictlist.keys())[x])
        x -= 1
    x += 1

# print(pidoras228)

# print(pidoras228)


# print(" ".join(pidoras228[pedro[0]]))

# print(pedro)


# эти два цикла считают количество букв и цивр сначала в сабджекте а потом в бади письма


try:
    del SubjektDictlist[user]
except KeyError:
    print('there is no masage from you')

for each in SubjektDictlist.values():
    SubjectListSorted += each

'''
 for c in each:
        if isinstance(c, type(b'')):
            listt = ["".join(c.decode("utf-8"))]
            st += listt
            print('bytes found')
        else:
'''

for each in BodyDictlist.values():
    each = [i.split('\r\n', 1)[0] for i in each]
    BodyListSorted += each

print(BodyListSorted)
print(SubjectListSorted)

'''
    for v in each:
        if isinstance(v, type(b'')):
            listt = ["".join(v.decode("utf-8"))]
            stt += listt.decode("utf-8")
        else:
'''

for each in " ".join(BodyListSorted):
    if each.isalpha():
        d['Letters'] += 1
    if each.isdigit():
        d['Numbers'] += 1
    else:
        print()

for each in " ".join(SubjectListSorted):

    if each.isalpha():
        d['Letters'] += 1
    if each.isdigit():
        d['Numbers'] += 1
    else:
        print()

print(d['Numbers'], d['Letters'])

mainstring = "Received mails on themes:  " + ", ".join(SubjectListSorted) + " With messages: " + "\n".join(
    BodyListSorted) + \
             "It contains " + str(d['Letters']) + " letters and " + str(d['Numbers']) + " numbers."
print(mainstring)

recipients = [user]

# create message
msg = MIMEText(mainstring, 'plain', 'utf-8')
msg['Subject'] = Header('subject', 'utf-8')
msg['From'] = user
msg['To'] = ", ".join(recipients)

# send it via gmail
s = SMTP_SSL(server, 465, timeout=10)
s.set_debuglevel(1)
try:
    s.login(user, password)
    s.sendmail(msg['From'], recipients, msg.as_string())
finally:
    s.quit()
# Subject from


'''
message = imap.search(None, 'subject "This Is a SPAM Subject"')
messages = messages[0].split()
for x in messages:
    message = imap.store(x, '+X-GM-LABELS', '\\Trash')
'''

mail = IMAPClient('imap.gmail.com', ssl=True, port=993)
mail.login(user, password)
totalMail = mail.select_folder('Inbox')

for each in SubjectListSorted:
    delMsg = mail.search('subject "' + each + '"')
    mail.delete_messages(delMsg)
